# Process the way points in the resultSet. --processWayPoints=instanceName[,noLast] . if noLast has a value, the last values won't be saved. This is useful for nesting. ~ nav,waypoints,hidden
parameters instanceName,noLast

# TODO instanceName could probably be taken from the first waypoint. That way we wouldn't have to require it in the parameters for this macro.

set Navigator,getNext,
	# Remove the first waypoint
	removeWaypoint ~!Me,instanceName!~,~!Me,key!~

	# Clear out our last values since they are not relevant for the new way point.
	removeLastValues ~!Me,instanceName!~

	# Get the waypoints back so the first one can be chosen again.
	retrieveResults Navigator,instances,~!Local,instanceName!~

	# Do it all again
	# processWayPoints ~!Me,instanceName!~,noLast

	# Reset our progress state.
	unset AP,state,~!Local,instanceName!~,lastDistance
	unset AP,state,~!Local,instanceName!~,distance

	# Reset arc/line deviation sensitivity.
	setAPVarWithContext ~!Local,instanceName!~,arcSensitivity,sensitivity,
	setAPVarWithContext ~!Local,instanceName!~,lineSensitivity,sensitivity,

# We just want to work with the waypoints.
retrieveResults Navigator,instances,~!Local,instanceName!~

# Calculate the status of each waypoint, and store it.
getWaypointStatus
stashResults Navigator,instances,~!Local,instanceName!~


firstResult
loop
	# Save our last values unless noLast has been set.
	if ~!Local,noLast!~,==,,
		setNested AP,state,~!Local,instanceName!~,lastDistance,~!AP,state,~!Local,instanceName!~,distance!~
		setNested AP,state,~!Local,instanceName!~,lastTrack-goal,~!AP,state,~!Local,instanceName!~,track-goal!~

	# Put the calculated values from getWaypointStatus into the current state.
	setNested AP,state,~!Local,instanceName!~,distance,~!Result,distance!~
	setNested AP,state,~!Local,instanceName!~,track-goal,~!Result,heading!~

	setNested AP,state,~!Local,instanceName!~,destination,longitude,~!Result,longitude!~
	setNested AP,state,~!Local,instanceName!~,destination,latitude,~!Result,latitude!~

	# If we don't have a begining distance, let's set it
	if ~!AP,state,~!Local,instanceName!~,beginingDistance!~,==,,
		setNested AP,state,~!Local,instanceName!~,beginingDistance,~!AP,state,~!Local,instanceName!~,distance!~


	# If we have a previous distance and heading, let's do stuff.
	if ~!AP,state,~!Local,instanceName!~,lastDistance!~,!=,,
		# get speed over the last iteration.

		if ~!AP,state,~!Local,instanceName!~,course-deviance!~,!=,,
			setNested AP,state,~!Local,instanceName!~,course-deviance-previous,~!AP,state,~!Local,instanceName!~,course-deviance!~
		else
			setNested AP,state,~!Local,instanceName!~,course-deviance-previous,~!Tmp,deviance!~

		set Local,previousLong,~!AP,previousState,~!Local,instanceName!~,longitude-deg!~
		set Local,previousLat,~!AP,previousState,~!Local,instanceName!~,latitude-deg!~
		set Local,currentLong,~!AP,state,~!Local,instanceName!~,longitude-deg!~
		set Local,currentLat,~!AP,state,~!Local,instanceName!~,latitude-deg!~

		set Local,previousLocation,~!Local,previousLong!~-~!Local,previousLat!~
		set Local,currentLocation,~!Local,currentLong!~-~!Local,currentLat!~

		# debug 1,prevPosition=~!Local,previousLocation!~  currentPositon=~!Local,currentLocation!~ instance=~!Local,instanceName!~
		if ~!Local,previousLocation!~,!=,~!Local,currentLocation!~,
			# If we have moved, let's Calculate stuff and make decisions
			# Take the current state with the current time
			microNow Local,now
			setNested AP,state,~!Local,instanceName!~,now,~!Local,now!~

			debug 3,processWayPoints DEBUG00 2CoordsToDistance Local,degreesSinceLastIteration,~!Local,previousLong!~,~!Local,previousLat!~,~!Local,currentLong!~,~!Local,currentLat!~

			2CoordsToDistance Local,degreesSinceLastIteration,~!Local,previousLong!~,~!Local,previousLat!~,~!Local,currentLong!~,~!Local,currentLat!~
			setNested AP,state,~!Local,instanceName!~,degreesSinceLastIteration,~!Local,degreesSinceLastIteration!~

			degreesToDistance Local,distanceSinceLastIteration,~!Local,degreesSinceLastIteration!~
			setNested AP,state,~!Local,instanceName!~,distanceSinceLastIteration,~!Local,distanceSinceLastIteration!~

			basicMaths Local,timeDifference,~!AP,state,~!Local,instanceName!~,now!~,-,~!AP,previousState,~!Local,instanceName!~,now!~
			setNested AP,state,~!Local,instanceName!~,timeDifference,~!Local,timeDifference!~

			basicMaths Local,speedOfIteration,~!AP,state,~!Local,instanceName!~,degreesSinceLastIteration!~,/,~!Local,timeDifference!~


			set Local,shouldDoNext,0

			# Is the waypoint behind us, but close-ISH to us?
			angleDiffDegrees Local,WaypointHeadingDiff,~!AP,state,~!Local,instanceName!~,track-goal!~,
			absolute Local,absoluteAngleDegrees,~!Local,WaypointHeadingDiff!~,~!AP,state,~!Local,instanceName!~,heading-deg!~
			if ~!Local,absoluteAngleDegrees!~,>,90,
				basicMaths Local,allowableRadius,~!AP,state,~!Local,instanceName!~,airspeed-kt!~,*,50
				getAPVar ~!Local,instanceName!~,distance,Local,distanceToWaypoint
				degreesToMeters Local,radiusToWaypoint,~!Local,distanceToWaypoint!~
				if ~!Local,radiusToWaypoint!~,<,~!Local,allowableRadius!~,
					set Local,shouldDoNext,1
					debug 1,~!Result,instanceName!~: The waypoint is behind us at ~!Local,WaypointHeadingDiff!~ degrees. And it is (~!Local,radiusToWaypoint!~m) within the allowable radius (~!Local,allowableRadius!~m) for this speed (~!AP,state,~!Local,instanceName!~,airspeed-kt!~).

			# Are we close in time to the waypoint?
			set Local,timeDistanceThreshold,3
			if ~!Result,timeToWaypoint!~,<,~!Local,timeDistanceThreshold!~,
				set Local,shouldDoNext,1
				debug 1,~!Result,instanceName!~: Our time (~!AP,state,~!Local,instanceName!~,distance!~) to the next waypoint is less than our giveUpThreshold (~!Local,timeDistanceThreshold!~). Let's move on to the next one.

			# Have we passed the waypoint?
			if ~!Result,minDistance!~,!=,,
				set Local,minDistanceMultiplier,3
				basicMaths Local,minDistanceMultiplied,~!Result,minDistance!~,*,~!Local,minDistanceMultiplier!~
				if ~!Result,distance!~,>,~!Local,minDistanceMultiplied!~,
					set Local,shouldDoNext,1
					debug 1,~!Result,instanceName!~: We are (~!Result,distance!~) more than ~!Local,minDistanceMultiplier!~ times (~!Local,minDistanceMultiplied!~) the closest distance (~!Result,minDistance!~) we have been to the current waypoint. Assuming that we have missed it.

			if ~!Local,shouldDoNext!~,==,1,
				debug 1,processWayPoints: ~!Result,instanceName!~ reached waypoint ~!Result,longitude!~,~!Result,latitude!~. ~!Local,giveUpThreshold!~,>,~!AP,state,~!Local,instanceName!~,distance!~
				keepPoint ~!Local,instanceName!~,passedWaypoints,~!Result,longitude!~,~!Result,latitude!~,~!AP,state,~!Local,instanceName!~,altitude-ft!~,~!Result,eventCategory!~-~!Result,eventName!~-~!Result,eventValue!~

				if ~!Result,pivotLongitude!~,!=,,
					debug 1,Got a pivot for ~!Local,instanceName!~. Setting that to ~!Result,pivotLongitude!~,~!Result,pivotLatitude!~.
					setNested AP,state,~!Local,instanceName!~,pivot,longitude,~!Result,pivotLongitude!~
					setNested AP,state,~!Local,instanceName!~,pivot,latitude,~!Result,pivotLatitude!~
				else
					unset AP,state,~!Local,instanceName!~,pivot

				if ~!Result,eventCategory!~,!=,,
					if ~!Result,eventName!~,!=,,
						debug 1,processWayPoints: Triggering requested event ~!Result,eventCategory!~,~!Result,eventName!~ with value "~!Result,eventValue!~".
						triggerEvent ~!Result,eventCategory!~,~!Result,eventName!~,~!Result,eventValue!~

				mark ~!Local,instanceName!~,Reached waypoint ~!Result,key!~: ~!Result,eventCategory!~,~!Result,eventName!~,~!Result,eventValue!~ lon/lat=~!Result,longitude!~,~!Result,latitude!~   lat/lon=~!Result,latitude!~,~!Result,longitude!~

				set Me,key,~!Result,key!~
				set Me,instanceName,~!Local,instanceName!~
				callFeature ~!Navigator,getNext!~

			# Set up some previous values
			# TODO only do this if the timeDifference is greater than 0. Or maybe distance difference would be better?
			copy ["AP,state,~!Local,instanceName!~","AP,previousState,~!Local,instanceName!~"]

		else
			pass
			# debug 0,processWayPoints We have not moved or not got new position data.
