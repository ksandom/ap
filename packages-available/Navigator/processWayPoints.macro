# Process the way points in the resultSet. --processWayPoints=instanceName[,noLast] . if noLast has a value, the last values won't be saved. This is useful for nesting. ~ nav,waypoints,hidden
parameters instanceName,noLast

# TODO instanceName could probably be taken from the first waypoint. That way we wouldn't have to require it in the parameters for this macro.

set Navigator,getNext,
	# Remove the first waypoint
	removeWaypoint ~!Result,instanceName!~,~!Result,key!~
	
	# Clear out our last values since they are not relevant for the new way point.
	removeLastValues ~!Result,instanceName!~
	
	# Get the waypoints back so the first one can be chosen again.
	retrieveResults Navigator,instances,~!Local,instanceName!~
	
	# Do it all again
	# processWayPoints ~!Result,instanceName!~,noLast

# We just want to work with the waypoints.
retrieveResults Navigator,instances,~!Result,key!~

# Calculate the status of each waypoint, and store it.
getWaypointStatus
stashResults Navigator,instances,~!Local,instanceName!~

first


loop
	# Save our last values unless noLast has been set.
	if ~!Local,noLast!~,==,,
		setNested AP,state,~!Local,instanceName!~,lastDistance,~!AP,state,~!Local,instanceName!~,distance!~
		setNested AP,state,~!Local,instanceName!~,lastTrack-goal,~!AP,state,~!Local,instanceName!~,track-goal!~
	
	# Put the calculated values from getWaypointStatus into the current state.
	setNested AP,state,~!Local,instanceName!~,distance,~!Result,distance!~
	setNested AP,state,~!Local,instanceName!~,track-goal,~!Result,heading!~
	
	setNested AP,state,~!Local,instanceName!~,destination,longitude,~!Result,longitude!~
	setNested AP,state,~!Local,instanceName!~,destination,latitude,~!Result,latitude!~
	
	# If we don't have a begining distance, let's set it
	if ~!AP,state,~!Local,instanceName!~,beginingDistance!~,==,,
		set AP,state,~!Local,instanceName!~,beginingDistance,
	
	# TODO Figure out scale
	# TODO Decide weather to ditch a waypoint if the distance has decreased by a certain amount, but is now increasing.
	
	# If we have a previous distance and heading, let's do stuff.
	if ~!AP,state,~!Local,instanceName!~,lastDistance!~,!=,,
		basicMaths Navigator,distanceChange,~!AP,state,~!Local,instanceName!~,lastDistance!~,-,~!AP,state,~!Local,instanceName!~,distance!~
		basicMaths Navigator,sensitiveChange,~!Navigator,distanceChange!~,*,10
		
		# Are we close to the way point?
		debug 3,is if ~!Navigator,sensitiveChange!~,>,~!AP,state,~!Local,instanceName!~,distance!~ ?
		if ~!Navigator,sensitiveChange!~,>,~!AP,state,~!Local,instanceName!~,distance!~,
			# NOTE At the moment the threshold is simply that we will exceed it in the next iteration... That is really close!
			
			debug 1,processWayPoints: ~!Result,instanceName!~ reached waypoint ~!Result,longitude!~,~!Result,latitude!~.
			
			if ~!Result,eventCategory!~,!=,,
				if ~!Result,eventName!~,!=,,
					debug 1,processWayPoints: Triggering requested event ~!Result,eventCategory!~,~!Result,eventName!~ with value "~!Result,eventValue!~".
					triggerEvent ~!Result,eventCategory!~,~!Result,eventName!~,~!Result,eventValue!~
			
			callFeature ~!Navigator,getNext!~
	
