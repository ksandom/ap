# Calculate the approach distance. ~ navidator,abstracted

parameters {"instanceName":"default","approachAngleInDegrees":"3"}

apToMe ~!Local,instanceName!~,cruiseAltitude
apToMe ~!Local,instanceName!~,safeAltitude
apToMeWithContext ~!Local,instanceName!~,routePlanning,finalApproachDistanceDegrees
apToMeWithContext ~!Local,instanceName!~,routePlanning,inverseRunwayAngle

# Take cruiseAltitude-safeAltitude as opposite. Project adjacent as approachDistance using 3 degrees.
basicMaths Me,approachEntryVirtualAltitude,~!Me,cruiseAltitude!~,-,~!Me,safeAltitude!~

degreesToRadians Me,approachEntryAngle,~!Local,approachAngleInDegrees!~
rightTriangleGetAdjacentFromAngleAndOpposite Me,approachEntryDistance,~!Me,approachEntryAngle!~,~!Me,safeAltitude!~

# TODO This is a hack. Add handeling of feet
basicMaths Me,approachEntryDistanceMeters,~!Me,approachEntryDistance!~,/,3
metersToDegrees Me,approachEntryDistanceMeters,~!Me,approachEntryDistanceMeters!~
angleAndDistanceToCoord Local,approachEntryOffset,~!Me,inverseRunwayAngle!~,~!Me,finalApproachDistanceDegrees!~


meToAPWithContext ~!Local,instanceName!~,routePlanning,approachEntryVirtualAltitude
meToAPWithContext ~!Local,instanceName!~,routePlanning,approachEntryDistanceMeters
meToAPWithContext ~!Local,instanceName!~,routePlanning,approachEntryDistance
meToAPWithContext ~!Local,instanceName!~,routePlanning,approachEntryAngle

setAPVarWithContext ~!Local,instanceName!~,routePlanning,approachEntryOffsetX,~!Local,approachEntryOffset,x!~
setAPVarWithContext ~!Local,instanceName!~,routePlanning,approachEntryOffsetY,~!Local,approachEntryOffset,y!~
