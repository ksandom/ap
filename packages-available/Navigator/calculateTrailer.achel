# Calculate how to get back on course using a metaphorical trailer bar to guide the steering. --calculateTrailer=instanceName ~ nav,waypoints,calculation
parameters instanceName

set Local,ready,1

function samePoles,
    parameters Category,variable,value1,value2

    set Local,result1,0
    set Local,result2,0

    if ~!Local,value1!~,<,0,
        set Local,result1,1

    if ~!Local,value2!~,<,0,
        set Local,result2,1

    set ~!Local,Category!~,~!Local,variable!~,0
    if ~!Local,result1!~,==,~!Local,result2!~,
        set ~!Local,Category!~,~!Local,variable!~,1

    makeAvailable ~!Local,Category!~,~!Local,variable!~

function meanValue,
    parameters instanceName,apVarIn,apVarOut,psuedoMeanLevel

    getAPVarWithContext ~!Local,instanceName!~,track,~!Local,apVarIn!~,Local,in
    getAPVarWithContext ~!Local,instanceName!~,track,~!Local,apVarOut!~,Local,out

    if ~!Local,out!~,==,,
        set Local,out,~!Local,in!~
    else
        basicMaths Local,multiplier,~!Local,psuedoMeanLevel!~,-,1
        basicMaths Local,simulatedTotal,~!Local,out!~,*,~!Local,multiplier!~
        basicMaths Local,newTotal,~!Local,simulatedTotal!~,+,~!Local,in!~
        basicMaths Local,out,~!Local,newTotal!~,/,~!Local,psuedoMeanLevel!~

    setAPVarWithContext ~!Local,instanceName!~,track,~!Local,apVarOut!~,~!Local,out!~
    set Local,~!Local,apVarOut!~,~!Local,out!~

    makeAvailable Local,~!Local,apVarOut!~

# TODO Sin:
# * Implement settings per overshoot, FOMO.
#   * beginVar
#   * beginOffset
#   * envVar
#   * endOffset
# * Implement other settings.
#   * allowSin
#   * globalOffset
# * Implement lookup:
#   * useSin - If we don't have enough data. Don't use sin.
#   * shouldDoSin - Do we meet the condition.

function sinGet,
    parameters instanceName,profile

    getAPVarWithContext ~!Local,instanceName!~,~!Local,srcProfile!~,startTime,Local,startTime
    getAPVarWithContext ~!Local,instanceName!~,~!Local,srcProfile!~,peakTime,Local,peakTime
    getAPVarWithContext ~!Local,instanceName!~,~!Local,srcProfile!~,endTime,Local,endTime
    getAPVarWithContext ~!Local,instanceName!~,~!Local,srcProfile!~,peakValue,Local,peakValue

    makeAvailable Local,startTime
    makeAvailable Local,peakTime
    makeAvailable Local,endTime
    makeAvailable Local,peakValue

function sinMigrate,
    parameters instanceName,srcProfile,dstProfile

    sinGet ~!Local,instanceName!~,~!Local,srcProfile!~

    setAPVarWithContext ~!Local,instanceName!~,~!Local,dstProfile!~,startTime,~!Local,startTime!~
    setAPVarWithContext ~!Local,instanceName!~,~!Local,dstProfile!~,peakTime,~!Local,peakTime!~
    setAPVarWithContext ~!Local,instanceName!~,~!Local,dstProfile!~,endTime,~!Local,endTime!~
    setAPVarWithContext ~!Local,instanceName!~,~!Local,dstProfile!~,peakValue,~!Local,peakValue!~

function sinRecord,
    parameters instanceName,distance,absDistance

    # Which pole are we in now?
    if ~!Local,distance!~,<,0,
        set Local,pole,N
    else
        set Local,pole,P

    # Manage the lastPole.
    getAPVarWithContext ~!Local,instanceName!~,sinGeneral,lastPole,Local,lastPole
    setAPVarWithContext ~!Local,instanceName!~,sinGeneral,lastPole,~!Local,pole!~

    # Pre-requisites.
    set Local,currentProfile,sin~!Local,pole!~
    microNow Local,now

    # If we have changed pole, migrate the current profile to previous, and perform calculations for later.
    if ~!Local,pole!~,!=,~!Local,lastPole!~,
        set Local,previousProfile,~!Local,currentProfile!~Previous
        setAPVarWithContext ~!Local,instanceName!~,~!Local,currentProfile!~,endTime,~!Local,now!~
        sinMigrate ~!Local,instanceName!~,~!Local,currentProfile!~,~!Local,previousProfile!~
        unset AP,state,~!Local,instanceName!~,sin~!Local,pole!~

        sinGet ~!Local,instanceName!~,~!Local,previousProfile!~
        basicMaths Local,peakSecond,~!Local,peakTime!~,-,~!Local,startTime!~
        basicMaths Local,endSecond,~!Local,endTime!~,-,~!Local,startTime!~

        setAPVarWithContext ~!Local,instanceName!~,~!Local,previousProfile!~,peakSecond,~!Local,peakSecond!~
        setAPVarWithContext ~!Local,instanceName!~,~!Local,previousProfile!~,endSecond,~!Local,endSecond!~

        setAPVarWithContext ~!Local,instanceName!~,~!Local,currentProfile!~,startTime,~!Local,now!~
        setAPVarWithContext ~!Local,instanceName!~,~!Local,currentProfile!~,havePeaked,0
        mark ~!Local,instanceName!~,~!Local,lastPole!~ -> ~!Local,pole!~

    # Make sure we have a valid peak value to work with.
    getAPVarWithContext ~!Local,instanceName!~,~!Local,currentProfile!~,peakValue,Local,peakValue
    if ~!Local,peakValue!~,==,,
        set Local,peakValue,0

    # Update the peak value if the new value is larger.
    if ~!Local,absDistance!~,>,~!Local,peakValue!~,
        setAPVarWithContext ~!Local,instanceName!~,~!Local,currentProfile!~,peakTime,~!Local,now!~
        setAPVarWithContext ~!Local,instanceName!~,~!Local,currentProfile!~,peakValue,~!Local,absDistance!~
        set Local,peakValue,~!Local,absDistance!~
        setAPVarWithContext ~!Local,instanceName!~,~!Local,currentProfile!~,havePeaked,0

    # Track whether we have peaked.
    getAPVarWithContext ~!Local,instanceName!~,~!Local,currentProfile!~,havePeaked,Local,havePeaked

    if ~!Local,havePeaked!~,==,0,
        if ~!Local,absDistance!~,<,~!Local,peakValue!~,
            setAPVarWithContext ~!Local,instanceName!~,~!Local,currentProfile!~,havePeaked,1
            round Local,roundedPeak,~!Local,peakValue!~,1
            mark ~!Local,instanceName!~,~!Local,pole!~/~!Local,roundedPeak!~



if ~!AP,state,~!Local,instanceName!~,longitude-deg!~,==,,
    debug 1,No location for ~!Local,instanceName!~.
    set Local,ready,0

if ~!AP,state,~!Local,instanceName!~,destination,longitude!~,==,,
    debug 1,No destination for ~!Local,instanceName!~.
    set Local,ready,0

if ~!Local,ready!~,==,1,
    # get origin
    setNested ["Navigator","deviance","origin",~!Navigator,origins,~!Local,instanceName!~!~]
    set Local,originX,~!Navigator,deviance,origin,longitude!~
    set Local,originY,~!Navigator,deviance,origin,latitude!~

    # get actual position
    set Local,pointX,~!AP,state,~!Local,instanceName!~,longitude-deg!~
    set Local,pointY,~!AP,state,~!Local,instanceName!~,latitude-deg!~
    setNested ["Navigator","deviance","position","longitude",~!Local,pointX!~]
    setNested ["Navigator","deviance","position","latitude",~!Local,pointY!~]

    # get destination
    setNested ["Navigator","deviance","destination",~!AP,state,~!Local,instanceName!~,destination!~]
    set Local,destinationX,~!AP,state,~!Local,instanceName!~,destination,longitude!~
    set Local,destinationY,~!AP,state,~!Local,instanceName!~,destination,latitude!~

    # Get orientation.
    set Local,orientationDegrees,~!AP,state,~!Local,instanceName!~,heading-deg!~
    degreesToRadians Local,orientation,~!Local,orientationDegrees!~

    # Get the linear calculations.
    linearPointStats Local,linearStats,~!Local,pointX!~,~!Local,pointY!~,~!Local,orientation!~,~!Local,originX!~,~!Local,originY!~,~!Local,destinationX!~,~!Local,destinationY!~
    set Local,deviance,~!Local,linearStats,distanceFromLine!~

    # Get speed.
    getAPVar ~!Local,instanceName!~,airspeed-kt,Local,speed


    # Detect bogus data.
    degreesToMeters Local,distanceInMeters,~!Local,linearStats,distanceFromLine!~
    setAPVarWithContext ~!Local,instanceName!~,track,distanceInMeters,~!Local,distanceInMeters!~

    set Local,mute,0
    getAPVar ~!Local,instanceName!~,useCleanStream,Local,useCleanStream
    if ~!Local,useCleanStream!~,==,1,
        cleanStream CleanDistance,~!Local,instanceName!~,~!Local,distanceInMeters!~,20,2,1
        set Local,distanceInMetersStableDraft,~!CleanDistance,~!Local,instanceName!~,dataOut!~
        set Local,mute,~!CleanDistance,~!Local,instanceName!~,mute!~
        setAPVarWithContext ~!Local,instanceName!~,track,distanceInMetersStableDraft,~!Local,distanceInMetersStableDraft!~
    else
        meanValue ~!Local,instanceName!~,distanceInMeters,distanceInMetersStableDraft,3
        # set Local,distanceInMetersStableDraft,~!Local,distanceInMeters!~
        # setAPVarWithContext ~!Local,instanceName!~,track,distanceInMetersStableDraft,~!Local,distanceInMetersStableDraft!~

    if ~!Local,mute!~,==,0,
        absolute Local,absDistanceInMeters,~!Local,distanceInMetersStableDraft!~

        getAPVarWithContext ~!Local,instanceName!~,track,lastDistance,Local,lastDistance
        if ~!Local,lastDistance!~,==,,
            debug 1,No overshoot history. Setting it up now.
            set Local,lastDistance,~!Local,distanceInMeters!~
            setAPVarWithContext ~!Local,instanceName!~,track,lastDistance,~!Local,lastDistance!~
            setAPVarWithContext ~!Local,instanceName!~,track,lastNow,~!Local,now!~
            set Local,mute,1

        basicMaths Local,distanceDiff,~!Local,distanceInMetersStableDraft!~,-,~!Local,lastDistance!~
        absolute Local,distanceDiffAbsolute,~!Local,distanceDiff!~
        getAPVarWithContext ~!Local,instanceName!~,track,lastDistanceDiffAbsolute,Local,lastDistanceDiffAbsolute
        if ~!Local,lastDistanceDiffAbsolute!~,==,,
            set Local,lastDistanceDiffAbsolute,~!Local,distanceDiffAbsolute!~
            setAPVarWithContext ~!Local,instanceName!~,track,lastDistanceDiffAbsolute,~!Local,lastDistanceDiffAbsolute!~
            setAPVarWithContext ~!Local,instanceName!~,track,bogusCount,0
        else
            getAPVarWithContext ~!Local,instanceName!~,track,bogusCount,Local,bogusCount
            basicMaths Local,bogusCount,~!Local,bogusCount!~,+,1
            basicMaths Local,effectiveCount,~!Local,bogusCount!~,+,1
            basicMaths Local,diffWithMargin,~!Local,lastDistanceDiffAbsolute!~,+,3
            basicMaths Local,distanceDiffThreshold,~!Local,diffWithMargin!~,*,~!Local,effectiveCount!~

            if ~!Local,useCleanStream!~,!=,1,
                if ~!Local,distanceDiffAbsolute!~,>,~!Local,distanceDiffThreshold!~,
                    getAPVar ~!Local,instanceName!~,maxPointsToSkip,Local,maxPointsToSkip
                    if ~!Local,bogusCount!~,<=,~!Local,maxPointsToSkip!~,
                        debug 1,Bogus data detected (~!Local,distanceDiffAbsolute!~>~!Local,distanceDiffThreshold!~). Skipping this point.
                        set Local,shouldDoOvershoot,0
                        set Local,overshootWhy,Bogus data (~!Local,distanceDiffAbsolute!~>~!Local,distanceDiffThreshold!~).
                        set Local,mute,1
                    else
                        debug 1,Bogus data detected (~!Local,distanceDiffAbsolute!~>~!Local,distanceDiffThreshold!~). But we have exceeded (~!Local,bogusCount!~) maxPointsToSkip (~!Local,maxPointsToSkip!~,). So letting this point past.
                        set Local,bogusCount,0
                        setAPVarWithContext ~!Local,instanceName!~,track,lastDistanceDiffAbsolute,~!Local,distanceDiffAbsolute!~
                        set Local,distanceInMetersStable,~!Local,distanceInMetersStableDraft!~
                else
                    set Local,bogusCount,0
                    setAPVarWithContext ~!Local,instanceName!~,track,lastDistanceDiffAbsolute,~!Local,distanceDiffAbsolute!~
                    set Local,distanceInMetersStable,~!Local,distanceInMetersStableDraft!~

            if ~!Local,useCleanStream!~,==,1,
                setAPVarWithContext ~!Local,instanceName!~,track,lastDistanceDiffAbsolute,~!Local,distanceDiffAbsolute!~
                set Local,distanceInMetersStable,~!Local,distanceInMetersStableDraft!~

            setAPVarWithContext ~!Local,instanceName!~,track,bogusCount,~!Local,bogusCount!~

            basicMaths Local,stepsRemaining,~!Local,absDistanceInMeters!~,/,~!Local,distanceDiffAbsolute!~

        sinRecord ~!Local,instanceName!~,~!Local,distanceInMetersStable!~,~!Local,absDistanceInMeters!~

    # Let's not invest any more time in the iteration if it's muted.
    if ~!Local,mute!~,==,0,

        # Calculate how long we have been close to the track.
        microNow Local,now
        set Local,timeMultiplier,1
        set Local,proximityMultiplier,1
        # TODO Make the threshold configurable.
        basicMaths Local,thesholdBase,~!Local,speed!~,+,10
        basicMaths Local,distanceThreshold,~!Local,thesholdBase!~,*,5
        if ~!Local,absDistanceInMeters!~,>,~!Local,distanceThreshold!~,
            debug 2,outside close zone ~!Local,instanceName!~ ~!Local,absDistanceInMeters!~
            setAPVarWithContext ~!Local,instanceName!~,track,closeSince,~!Local,now!~
        else
            set Local,proximityMultiplier,2
            getAPVarWithContext ~!Local,instanceName!~,track,closeSince,Local,closeSince
            if ~!Local,closeSince!~,==,,
                setAPVarWithContext ~!Local,instanceName!~,track,closeSince,~!Local,now!~
                set Local,closeSince,~!Local,now!~
                debug 1,Set closeSince=~!Local,now!~

            basicMaths Local,closeTime,~!Local,now!~,-,~!Local,closeSince!~
            if ~!Local,closeTime!~,>,2,
                basicMaths Local,timeMultiplier,~!Local,closeTime!~,/,10

        # How long should the trailer bar be in meters?
        basicMaths Local,barLength,~!Local,speed!~,*,40
        basicMaths Local,barLength,~!Local,barLength!~,*,~!Local,timeMultiplier!~
        basicMaths Local,barLength,~!Local,barLength!~,*,~!Local,proximityMultiplier!~
        basicMaths Local,barLength,~!Local,barLength!~,+,10

        getAPVar ~!Local,instanceName!~,maxBarLength,Local,maxBarLength
        if ~!Local,barLength!~,>,~!Local,maxBarLength!~,
            set Local,barLength,~!Local,maxBarLength!~

        metersToDegrees Local,barLengthDegrees,~!Local,barLength!~

        # Calculate aiming point along the track in meters (so the differences don't get lost in rounding errors).
        basicMaths Local,cSquared,~!Local,barLength!~,^,2
        basicMaths Local,aSquared,~!Local,distanceInMetersStable!~,^,2
        basicMaths Local,bSquared,~!Local,cSquared!~,-,~!Local,aSquared!~
        basicMaths Local,bMeters,~!Local,bSquared!~,^,0.5
        metersToDegrees Local,b,~!Local,bMeters!~

        angleAndDistanceToCoord Local,bOffset,~!Local,linearStats,extra,lineAngle!~,~!Local,b!~
        basicMaths Local,aimX,~!Local,linearStats,extra,idealPosition,x!~,+,~!Local,bOffset,x!~
        basicMaths Local,aimY,~!Local,linearStats,extra,idealPosition,y!~,+,~!Local,bOffset,y!~

        # Calculate angular offset from the current point.
        2CoordsToAngle Local,rawAimAngle,~!Local,pointX!~,~!Local,pointY!~,~!Local,aimX!~,~!Local,aimY!~
        angleDiffRadians Local,aimAngle,~!Local,linearStats,extra,lineAngle!~,~!Local,rawAimAngle!~
        basicMaths Local,aimAngle,~!Local,aimAngle!~,*,-1

        angleDiffRadians Local,barAngle,~!Local,rawAimAngle!~,~!Local,orientation!~
        angleDiffRadians Local,headingOffset,~!Local,linearStats,extra,lineAngle!~,~!Local,orientation!~

        # Desensitise with time.
        basicMaths Local,timeDivider,~!Local,closeTime!~,/,100
        basicMaths Local,timeDivider,~!Local,timeDivider!~,+,1
        if ~!Local,timeDivider!~,>,10,
            set Local,timeDivider,10

        basicMaths Local,headingOffsetDesenitised,~!Local,headingOffset!~,/,~!Local,timeDivider!~



        # Figure out if heading and distance have the same polarity.
        getAPVarWithContext ~!Local,instanceName!~,track,distancePolarity,Local,lastDistancePolarity
        set Local,distanceSide,-1
        if ~!Local,distanceInMetersStable!~,>,0,
            set Local,distanceSide,1
        setAPVarWithContext ~!Local,instanceName!~,track,distancePolarity,~!Local,distanceSide!~

        set Local,changeSide,-1
        if ~!Local,distanceDiff!~,>,0,
            set Local,changeSide,1

        # set Local,headingSide,-1
        pass if ~!Local,headingOffset!~,>,0,
            set Local,headingSide,1

        set Local,hdDstPolarity,0
        if ~!Local,distanceSide!~,==,~!Local,changeSide!~,
            set Local,hdDstPolarity,1


        # Test: If the new distance is in the direction of closer to the line from the perspective of the old distance.

        # The numbers that these are compared to are integers that increment with each iteration starting at 0. So to say that we should have been getting closer for at least 2 iterations prior to this one would mean that closerThreshold should be set to 2. Conversely the same for further away would be to set fartherThreshold to -2.
        set Local,closerThreshold,1
        set Local,fartherThreshold,-1

        if ~!Local,distanceInMetersStable!~,==,~!Local,lastDistance!~,
            set Local,shouldDoOvershoot,0
            set Local,overshootWhy,noChange: ~!Local,distanceInMetersStable!~

        getAPVarWithContext ~!Local,instanceName!~,track,closer,Local,closer

        if ~!Local,closer!~,==,,
            set Local,closer,0

        set Local,isCloser,0
        if ~!Local,lastDistancePolarity!~,!=,~!Local,distanceSide!~,
            set Local,closer,0
        else
            if ~!Local,lastDistance!~,<,0,
                if ~!Local,distanceInMetersStable!~,>,~!Local,lastDistance!~,
                    if ~!Local,distanceInMetersStable!~,<,0,
                        set Local,isCloser,1
            if ~!Local,lastDistance!~,>=,0,
                if ~!Local,distanceInMetersStable!~,<,~!Local,lastDistance!~,
                    if ~!Local,distanceInMetersStable!~,>,0,
                        set Local,isCloser,1

            if ~!Local,isCloser!~,==,1,
                if ~!Local,closer!~,<,0,
                    set Local,closer,0
                else
                    basicMaths Local,closer,~!Local,closer!~,+,1

            if ~!Local,isCloser!~,==,0,
                if ~!Local,closer!~,>,0,
                    set Local,closer,0
                else
                    basicMaths Local,closer,~!Local,closer!~,-,1

        setAPVarWithContext ~!Local,instanceName!~,track,closer,~!Local,closer!~


        # New overshoot code.
        # If heading diff is greater than threshold.
        #   If the new distance is in the direction of closer to the line from the perspective of the old distance.
        #     Take absolute distance difference.
        #     Take absolute distance remaining.
        #     Take absolute remaining distance and divide by absolute distance difference.
        #     Divide by time difference.
        #
        #     If distance remaining is negative
        #       Invert.

        # Overshoot.
        # If heading diff is greater than threshold.
        set Local,shouldDoOvershoot,0
        set Local,overshootWhy,na

        # Only apply overshoot if we are getting closer to the line.
        if ~!Local,closer!~,>,~!Local,closerThreshold!~,
            set Local,shouldDoOvershoot,1
            set Local,overshootWhy,notCloser: ~!Local,distanceInMetersStable!~ vs ~!Local,lastDistance!~

        getAPVar ~!Local,instanceName!~,overshootHeadingThresholdRadians,Local,overshootHeadingThresholdRadians
        angleDiffRadians Local,planeToLineAngle,~!Local,linearStats,extra,lineAngle!~,~!Local,orientation!~
        absolute Local,planeToLineAngleAbs,~!Local,planeToLineAngle!~
        if ~!Local,planeToLineAngleAbs!~,<,~!Local,overshootHeadingThresholdRadians!~,
            set Local,shouldDoOvershoot,0
            set Local,overshootWhy,angleThreshold: ~!Local,planeToLineAngleAbs!~ < ~!Local,overshootHeadingThresholdRadians!~

        # Overshoot should only apply when we are facing the same direction as travel.
        if ~!Local,hdDstPolarity!~,==,1,
            set Local,shouldDoOvershoot,0
            set Local,overshootWhy,heading and distance don't have the same polarity.

        # Some calculations to be shared.
        getAPVarWithContext ~!Local,instanceName!~,track,lastNow,Local,lastNow
        basicMaths Local,nowChange,~!Local,now!~,-,~!Local,lastNow!~
        basicMaths Local,metersPerSecond,~!Local,distanceDiffAbsolute!~,/,~!Local,nowChange!~

        setAPVarWithContext ~!Local,instanceName!~,track,metersPerSecond,~!Local,metersPerSecond!~
        meanValue ~!Local,instanceName!~,metersPerSecond,metersPerSecondSmoothed,3
        basicMaths Local,overshootSeconds,~!Local,absDistanceInMeters!~,/,~!Local,metersPerSecondSmoothed!~

        # Do the overshoot.
        if ~!Local,shouldDoOvershoot!~,==,1,
            # basicMaths Local,overshootCounterAngle,~!Local,planeToLineAngle!~,/,~!Local,overshootSeconds!~
            # basicMaths Local,overshootCounterAngle,1,/,~!Local,overshootSeconds!~
            # basicMaths Local,overshootCounterAngle,~!Local,distanceDiffAbsolute!~,/,~!Local,overshootSeconds!~

            set Local,minOvershootSeconds,~!Local,overshootSeconds!~
            # TODO Make this limit configurable.
            if ~!Local,minOvershootSeconds!~,<,2,
                set Local,minOvershootSeconds,2

            basicMaths Local,overshootCounterAngle,~!Local,metersPerSecondSmoothed!~,/,~!Local,minOvershootSeconds!~

            # Change the shape.
            getAPVar ~!Local,instanceName!~,overshootMultiplier,Local,overshootMultiplier
            getAPVar ~!Local,instanceName!~,overshootOffset,Local,overshootOffset

            basicMaths Local,overshootCounterAngle,~!Local,overshootCounterAngle!~,*,~!Local,overshootMultiplier!~
            basicMaths Local,overshootCounterAngle,~!Local,overshootCounterAngle!~,+,~!Local,overshootOffset!~

            if ~!Local,overshootCounterAngle!~,<,0,
                set Local,overshootCounterAngle,0

            # Apply polarity based on the polarity of the distance.
            if ~!Local,distanceInMetersStable!~,>,0,
                basicMaths Local,overshootCounterAngle,~!Local,overshootCounterAngle!~,*,-1



            debug 2,Overshoot oA=~!Local,overshootCounterAngle!~  dC=~!Local,distanceDiff!~ tC=~!Local,nowChange!~ m/s=~!Local,metersPerSecondSmoothed!~ oss=~!Local,overshootSeconds!~

            # Did we overshoot?
            set Local,before,0
            set Local,after,0
            if ~!Local,lastDistance!~,<,0,
                set Local,before,1
            if ~!Local,distanceInMetersStable!~,<,0,
                set Local,after,1

            if ~!Local,before!~,!=,~!Local,after!~,
                debug 1,---------------- Crossed the line. ----------------
                mark ~!Local,instanceName!~,Crossed the line.
        # TODO Change this back to else once it is known good again.
        if ~!Local,shouldDoOvershoot!~,!=,1,
            set Local,overshootCounterAngle,0

        setAPVarWithContext ~!Local,instanceName!~,track,lastDistance,~!Local,distanceInMetersStable!~
        setAPVarWithContext ~!Local,instanceName!~,track,lastNow,~!Local,now!~


        # Calculate FOMO from headingOffset.
        absolute Local,absoluteHeadingOffset,~!Local,headingOffset!~
        set Local,fomoValue,0
        if ~!Local,closer!~,<,~!Local,fartherThreshold!~,
            basicMaths Local,fomoValue,~!Local,metersPerSecondSmoothed!~,/,2000
            basicMaths Local,fomoValue,~!Local,fomoValue!~,*,~!Local,absDistanceInMeters!~

            if ~!Local,distanceInMetersStable!~,<,0,
                basicMaths Local,fomoValue,~!Local,fomoValue!~,*,-1


        # Calculate nudge from distance if we aren't getting closer to the goal.
        set Local,nudge,0
        if ~!Local,closer!~,<,~!Local,fartherThreshold!~,
            set Local,nudge,~!Local,absDistanceInMeters!~
            if ~!Local,nudge!~,>,10,
                set Local,nudge,10

            if ~!Local,distanceInMetersStable!~,<,0,
                basicMaths Local,nudge,~!Local,nudge!~,*,-1

            basicMaths Local,nudge,~!Local,nudge!~,/,10


        # Calculate calm to reduce oscillations, while encouraging finding the line.
        set Local,calm,0
        getAPVar ~!Local,instanceName!~,calmMinSpeed,Local,calmMinSpeed
        getAPVar ~!Local,instanceName!~,calmMaxSpeed,Local,calmMaxSpeed
        getAPVar ~!Local,instanceName!~,calmBand,Local,calmBand

        if ~!Local,closer!~,>,~!Local,closerThreshold!~,
            if ~!Local,metersPerSecondSmoothed!~,>,~!Local,calmMinSpeed!~,
                if ~!Local,metersPerSecondSmoothed!~,>=,~!Local,calmMaxSpeed!~,
                    set Local,calm,-1
                else
                    basicMaths Local,calmInRange,~!Local,metersPerSecondSmoothed!~,-,~!Local,calmMinSpeed!~
                    basicMaths Local,calm,~!Local,calmInRange!~,/,~!Local,calmBand!~
                    basicMaths Local,calm,~!Local,calm!~,*,-1

        # Calculate speed. - Pump the brakes when we are manoeuvring too fast.
        # Re-use the calm settings.
        set Local,speed,0
        set Local,useSpeed,0

        if ~!Local,closer!~,>,~!Local,closerThreshold!~,
            set Local,useSpeed,1

        if ~!Local,closer!~,<,~!Local,fartherThreshold!~,
            set Local,useSpeed,1

        if ~!Local,useSpeed!~,==,1,
            if ~!Local,metersPerSecondSmoothed!~,>,~!Local,calmMinSpeed!~,
                if ~!Local,metersPerSecondSmoothed!~,>=,~!Local,calmMaxSpeed!~,
                    set Local,speed,1
                else
                    basicMaths Local,speedInRange,~!Local,metersPerSecondSmoothed!~,-,~!Local,calmMinSpeed!~
                    basicMaths Local,speed,~!Local,speedInRange!~,/,~!Local,calmBand!~
                    absolute Local,speed,~!Local,speed!~

                if ~!Local,distanceDiff!~,<,0,
                    basicMaths Local,speed,~!Local,speed!~,*,-1


        # Calculate longMean to centre our oscillations.
        getAPVar ~!Local,instanceName!~,strengthLongMean,Local,strengthLongMean
        if ~!Local,strengthLongMean!~,!=,0,
            getAPVar ~!Local,instanceName!~,longMeanIterations,Local,longMeanIterations
            meanValue ~!Local,instanceName!~,distanceInMeters,distanceLongMean,~!Local,longMeanIterations!~
            basicMaths Local,longMeanOffset,~!Local,distanceLongMean!~,/,50
        else
            setAPVarWithContext ~!Local,instanceName!~,track,distanceLongMean,


        # Assert that we are in the right trailerProfile.
        getAPVar ~!Local,instanceName!~,trailerProfileStart,Local,trailerProfileStart
        getAPVar ~!Local,instanceName!~,minSeconds,Local,minSeconds
        basicMaths Local,timeInCurrentProfile,~!Local,now!~,-,~!Local,trailerProfileStart!~

        if ~!Local,timeInCurrentProfile!~,>,~!Local,minSeconds!~,
            getAPVar ~!Local,instanceName!~,closeHeadingDiffRadians,Local,closeHeadingDiffRadians
            getAPVar ~!Local,instanceName!~,closeDistance,Local,closeDistance
            getAPVar ~!Local,instanceName!~,farHeadingDiffRadians,Local,farHeadingDiffRadians
            getAPVar ~!Local,instanceName!~,farDistance,Local,farDistance

            set Local,profileSelector,na
            if ~!Local,absoluteHeadingOffset!~,<,~!Local,closeHeadingDiffRadians!~,
                if ~!Local,absDistanceInMeters!~,<,~!Local,closeDistance!~,
                    set Local,profileSelector,close

            if ~!Local,absoluteHeadingOffset!~,>,~!Local,farHeadingDiffRadians!~,
                set Local,profileSelector,far

            if ~!Local,absDistanceInMeters!~,>,~!Local,farDistance!~,
                set Local,profileSelector,far

            set Local,trailerProfileToApply,na
            set Local,shouldReset,0
            if ~!Local,profileSelector!~,==,close,
                getAPVar ~!Local,instanceName!~,farShouldReset,Local,shouldReset

                getAPVar ~!Local,instanceName!~,trailerProfileClose,Local,trailerProfileToApply
                # debug 1,trailerProfile close because:  ho(~!Local,absoluteHeadingOffset!~) < ~!Local,closeHeadingDiffRadians!~  and  d(~!Local,absDistanceInMeters!~) < ~!Local,closeDistance!~
            if ~!Local,profileSelector!~,==,far,
                getAPVar ~!Local,instanceName!~,closeShouldReset,Local,shouldReset

                getAPVar ~!Local,instanceName!~,trailerProfileFar,Local,trailerProfileToApply
                # debug 1,trailerProfile far because:  ho(~!Local,absoluteHeadingOffset!~) > ~!Local,farHeadingDiffRadians!~  and  d(~!Local,absDistanceInMeters!~) > ~!Local,farDistance!~

            trailerProfile ~!Local,instanceName!~,~!Local,trailerProfileToApply!~,~!Local,shouldReset!~


        # Apply weights.
        getAPVar ~!Local,instanceName!~,strengthTrailer,Local,strengthTrailer
        getAPVar ~!Local,instanceName!~,strengthHeading,Local,strengthHeading
        getAPVar ~!Local,instanceName!~,strengthBarAngle,Local,strengthBarAngle
        getAPVar ~!Local,instanceName!~,strengthOvershoot,Local,strengthOvershoot
        getAPVar ~!Local,instanceName!~,strengthFomo,Local,strengthFomo
        getAPVar ~!Local,instanceName!~,strengthNudge,Local,strengthNudge
        getAPVar ~!Local,instanceName!~,strengthSpeed,Local,strengthSpeed

        applyRangeAndMultiplier Local,adjustedTrailer,,~!Local,aimAngle!~,,~!Local,strengthTrailer!~
        applyRangeAndMultiplier Local,adjustedHeading,,~!Local,headingOffsetDesenitised!~,,~!Local,strengthHeading!~
        applyRangeAndMultiplier Local,adjustedBarAngle,,~!Local,barAngle!~,,~!Local,strengthBarAngle!~
        applyRangeAndMultiplier Local,adjustedOvershoot,,~!Local,overshootCounterAngle!~,,~!Local,strengthOvershoot!~
        applyRangeAndMultiplier Local,adjustedFomo,,~!Local,fomoValue!~,,~!Local,strengthFomo!~
        applyRangeAndMultiplier Local,adjustedNudge,,~!Local,nudge!~,,~!Local,strengthNudge!~
        applyRangeAndMultiplier Local,adjustedSpeed,,~!Local,speed!~,,~!Local,strengthSpeed!~
        applyRangeAndMultiplier Local,adjustedLongMeanOffset,,~!Local,longMeanOffset!~,,~!Local,strengthLongMean!~

        # Apply calm.
        function applyCalm,
            parameters Cat,var,distance,calm,value

            # Is this input adding speed to our progress?
            samePoles Local,samePoles,~!Local,distance!~,~!Local,value!~
            if ~!Local,samePoles!~,!=,1,
                basicMaths Local,result,~!Local,value!~,*,~!Local,calm!~
                set ~!Local,Cat!~,~!Local,var!~,~!Local,result!~
                # debug 1,~!Color,green!~got here 0000a~!Color,default!~ poles=~!Local,samePoles!~ var=~!Local,Cat!~,~!Local,var!~ d=~!Local,distance!~ c=~!Local,calm!~ v=~!Local,value!~ ==> "~!~!Local,Cat!~,~!Local,var!~!~"
            else
                set ~!Local,Cat!~,~!Local,var!~,0


            makeAvailable ~!Local,Cat!~,~!Local,var!~

        applyCalm Local,adjustedCalmTrailer,~!Local,distanceInMetersStable!~,~!Local,calm!~,~!Local,adjustedTrailer!~
        applyCalm Local,adjustedCalmHeading,~!Local,distanceInMetersStable!~,~!Local,calm!~,~!Local,adjustedHeading!~
        applyCalm Local,adjustedCalmBarAngle,~!Local,distanceInMetersStable!~,~!Local,calm!~,~!Local,adjustedBarAngle!~
        applyCalm Local,adjustedCalmNudge,~!Local,distanceInMetersStable!~,~!Local,calm!~,~!Local,adjustedNudge!~

        # Combine values.
        basicMaths Local,finalAim,~!Local,adjustedTrailer!~,+,~!Local,adjustedHeading!~
        basicMaths Local,finalAim,~!Local,finalAim!~,+,~!Local,adjustedBarAngle!~
        basicMaths Local,finalAim,~!Local,finalAim!~,+,~!Local,adjustedOvershoot!~
        basicMaths Local,finalAim,~!Local,finalAim!~,+,~!Local,adjustedFomo!~
        basicMaths Local,finalAim,~!Local,finalAim!~,+,~!Local,adjustedNudge!~
        basicMaths Local,finalAim,~!Local,finalAim!~,+,~!Local,adjustedSpeed!~
        basicMaths Local,finalAim,~!Local,finalAim!~,+,~!Local,adjustedLongMeanOffset!~

        basicMaths Local,finalAim,~!Local,finalAim!~,+,~!Local,adjustedCalmTrailer!~
        basicMaths Local,finalAim,~!Local,finalAim!~,+,~!Local,adjustedCalmHeading!~
        basicMaths Local,finalAim,~!Local,finalAim!~,+,~!Local,adjustedCalmBarAngle!~
        basicMaths Local,finalAim,~!Local,finalAim!~,+,~!Local,adjustedCalmNudge!~


        radiansToDegrees Local,aimAngle-deg,~!Local,finalAim!~

        # Make it available to the AP.
        setAPVarWithContext ~!Local,instanceName!~,track,aimAngle,~!Local,finalAim!~
        setAPVarWithContext ~!Local,instanceName!~,track,aimAngle-deg,~!Local,aimAngle-deg!~

    # For use in the map.
    setAPVarWithContext ~!Local,instanceName!~,track,aimLon,~!Local,aimX!~
    setAPVarWithContext ~!Local,instanceName!~,track,aimLat,~!Local,aimY!~


    # debug 1,bOffset=~!Local,bOffset!~  lA=~!Local,linearStats,extra,lineAngle!~  b=~!Local,b!~(~!Local,bMeters!~)  bSquared=~!Local,bSquared!~  cSquared=~!Local,cSquared!~  aSquared=~!Local,aSquared!~  distanceInMetersStable=~!Local,distanceInMetersStable!~  barLength=~!Local,barLength!~(~!Local,barLengthDegrees!~)
    debug 2,d=~!Local,distanceInMetersStable!~(~!Local,linearStats,distanceFromLine!~) effort=~!Local,aimAngle-deg!~ s=~!Local,speed!~ barLength=~!Local,barLength!~ aim=~!Local,aimY!~,~!Local,aimX!~ closeTime=~!Local,closeTime!~=~!Local,now!~,-,~!Local,closeSince!~ multipliers=~!Local,timeMultiplier!~,~!Local,proximityMultiplier!~

    debug 2,effort=~!Local,aimAngle-deg!~  aimAngle=~!Local,aimAngleWithOvershoot!~=~!Local,aimAngle!~,-,~!Local,overshootCounterAngle!~  d=~!Local,distanceInMetersStable!~  angles: r=~!Local,rawAimAngle!~ h/o=~!Local,orientation!~

    # Generated with ./generateTrailerDebug.sh
    isolate
        setNested ["AP","state","~!Local,instanceName!~","trailerDebug","linearStats",~!Local,linearStats!~]
        if ~!CleanDistance,~!Local,instanceName!~,mute!~,!=,,
            setNested ["AP","state","~!Local,instanceName!~","trailerDebug","cleanDistanceStats",~!CleanDistance,~!Local,instanceName!~!~]
            setNested ["AP","state","~!Local,instanceName!~","trailerDebug","cleanDistanceStatsDraft",~!CleanDistance,~!Local,instanceName!~-draft!~]
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,absDistanceInMeters,~!Local,absDistanceInMeters!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,absoluteHeadingOffset,~!Local,absoluteHeadingOffset!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedBarAngle,~!Local,adjustedBarAngle!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedCalmBarAngle,~!Local,adjustedCalmBarAngle!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedCalmHeading,~!Local,adjustedCalmHeading!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedCalmNudge,~!Local,adjustedCalmNudge!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedCalmTrailer,~!Local,adjustedCalmTrailer!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedFomo,~!Local,adjustedFomo!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedHeading,~!Local,adjustedHeading!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedLongMeanOffset,~!Local,adjustedLongMeanOffset!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedNudge,~!Local,adjustedNudge!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedOvershoot,~!Local,adjustedOvershoot!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedSpeed,~!Local,adjustedSpeed!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,adjustedTrailer,~!Local,adjustedTrailer!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,after,~!Local,after!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,aimAngle,~!Local,aimAngle!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,aimAngle-deg,~!Local,aimAngle-deg!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,aimX,~!Local,aimX!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,aimY,~!Local,aimY!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,aSquared,~!Local,aSquared!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,b,~!Local,b!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,barAngle,~!Local,barAngle!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,barLength,~!Local,barLength!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,barLengthDegrees,~!Local,barLengthDegrees!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,before,~!Local,before!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,bMeters,~!Local,bMeters!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,bOffset-x,~!Local,bOffset,x!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,bOffset-y,~!Local,bOffset,y!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,bogusCount,~!Local,bogusCount!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,branch,~!Local,branch!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,bSquared,~!Local,bSquared!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,calm,~!Local,calm!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,calmBand,~!Local,calmBand!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,calmInRange,~!Local,calmInRange!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,calmMaxSpeed,~!Local,calmMaxSpeed!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,calmMinSpeed,~!Local,calmMinSpeed!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,changeSide,~!Local,changeSide!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,closeDistance,~!Local,closeDistance!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,closeHeadingDiffRadians,~!Local,closeHeadingDiffRadians!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,closer,~!Local,closer!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,closerThreshold,~!Local,closerThreshold!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,closeSince,~!Local,closeSince!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,closeTime,~!Local,closeTime!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,cSquared,~!Local,cSquared!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,currentProfile,~!Local,currentProfile!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,destinationX,~!Local,destinationX!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,destinationY,~!Local,destinationY!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,deviance,~!Local,deviance!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,diffWithMargin,~!Local,diffWithMargin!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,distanceDiff,~!Local,distanceDiff!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,distanceDiffAbsolute,~!Local,distanceDiffAbsolute!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,distanceDiffThreshold,~!Local,distanceDiffThreshold!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,distanceInMeters,~!Local,distanceInMeters!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,distanceInMetersStable,~!Local,distanceInMetersStable!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,distanceInMetersStableDraft,~!Local,distanceInMetersStableDraft!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,distanceSide,~!Local,distanceSide!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,distanceThreshold,~!Local,distanceThreshold!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,effectiveCount,~!Local,effectiveCount!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,endSecond,~!Local,endSecond!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,endTime,~!Local,endTime!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,farDistance,~!Local,farDistance!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,farHeadingDiffRadians,~!Local,farHeadingDiffRadians!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,fartherThreshold,~!Local,fartherThreshold!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,finalAim,~!Local,finalAim!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,fomoValue,~!Local,fomoValue!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,havePeaked,~!Local,havePeaked!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,hdDstPolarity,~!Local,hdDstPolarity!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,headingOffset,~!Local,headingOffset!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,headingOffsetDesenitised,~!Local,headingOffsetDesenitised!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,headingSide,~!Local,headingSide!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,in,~!Local,in!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,isCloser,~!Local,isCloser!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,lastDistance,~!Local,lastDistance!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,lastDistanceDiffAbsolute,~!Local,lastDistanceDiffAbsolute!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,lastDistancePolarity,~!Local,lastDistancePolarity!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,lastNow,~!Local,lastNow!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,lastPole,~!Local,lastPole!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,longMeanIterations,~!Local,longMeanIterations!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,longMeanOffset,~!Local,longMeanOffset!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,maxBarLength,~!Local,maxBarLength!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,maxPointsToSkip,~!Local,maxPointsToSkip!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,metersPerSecond,~!Local,metersPerSecond!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,metersPerSecondSmoothed,~!Local,metersPerSecondSmoothed!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,minOvershootSeconds,~!Local,minOvershootSeconds!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,minSeconds,~!Local,minSeconds!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,multiplier,~!Local,multiplier!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,mute,~!Local,mute!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,newTotal,~!Local,newTotal!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,now,~!Local,now!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,nowChange,~!Local,nowChange!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,nudge,~!Local,nudge!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,orientation,~!Local,orientation!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,orientationDegrees,~!Local,orientationDegrees!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,originX,~!Local,originX!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,originY,~!Local,originY!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,out,~!Local,out!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,overshootCounterAngle,~!Local,overshootCounterAngle!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,overshootHeadingThresholdRadians,~!Local,overshootHeadingThresholdRadians!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,overshootMultiplier,~!Local,overshootMultiplier!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,overshootOffset,~!Local,overshootOffset!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,overshootSeconds,~!Local,overshootSeconds!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,overshootWhy,~!Local,overshootWhy!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,peakSecond,~!Local,peakSecond!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,peakTime,~!Local,peakTime!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,peakValue,~!Local,peakValue!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,planeToLineAngle,~!Local,planeToLineAngle!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,planeToLineAngleAbs,~!Local,planeToLineAngleAbs!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,pointX,~!Local,pointX!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,pointY,~!Local,pointY!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,pole,~!Local,pole!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,previousProfile,~!Local,previousProfile!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,profileSelector,~!Local,profileSelector!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,proximityMultiplier,~!Local,proximityMultiplier!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,rawAimAngle,~!Local,rawAimAngle!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,ready,~!Local,ready!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,result,~!Local,result!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,result1,~!Local,result1!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,result2,~!Local,result2!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,roundedPeak,~!Local,roundedPeak!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,samePoles,~!Local,samePoles!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,shouldDoOvershoot,~!Local,shouldDoOvershoot!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,shouldReset,~!Local,shouldReset!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,simulatedTotal,~!Local,simulatedTotal!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,speed,~!Local,speed!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,speedInRange,~!Local,speedInRange!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,startTime,~!Local,startTime!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,stepsRemaining,~!Local,stepsRemaining!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,strengthBarAngle,~!Local,strengthBarAngle!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,strengthFomo,~!Local,strengthFomo!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,strengthHeading,~!Local,strengthHeading!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,strengthLongMean,~!Local,strengthLongMean!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,strengthNudge,~!Local,strengthNudge!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,strengthOvershoot,~!Local,strengthOvershoot!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,strengthSpeed,~!Local,strengthSpeed!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,strengthTrailer,~!Local,strengthTrailer!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,thesholdBase,~!Local,thesholdBase!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,timeDivider,~!Local,timeDivider!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,timeInCurrentProfile,~!Local,timeInCurrentProfile!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,timeMultiplier,~!Local,timeMultiplier!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,trailerProfileStart,~!Local,trailerProfileStart!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,trailerProfileToApply,~!Local,trailerProfileToApply!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,useCleanStream,~!Local,useCleanStream!~
        setAPVarWithContext ~!Local,instanceName!~,trailerDebug,useSpeed,~!Local,useSpeed!~
