# Create some base rules that other planes can inherit from. --APRules-base=[instanceName] . instanceName defaults to "default". ~ AP,rules,plane
parameters {"instanceName":"default"}

set Tmp,instanceName,~!Local,instanceName!~

# TODO double check out the events are called (I can't remember). If they don't convey the instanceName (which I think they don't), it can be set in this macro as the value being passed, and also being amended to the event name so that there isn't clash.


# Structure: AP,stateRules,instanceName,stateName,stateComponent

# Base settings
# Roll
massSet ["AP,stateRules,base,base,roll"],
	setNested ["~!Me,stuff!~,algorithm","direct"]
	setNested ~!Me,stuff!~,input,min,-45
	setNested ~!Me,stuff!~,input,center,0
	setNested ~!Me,stuff!~,input,max,45
	setNested ~!Me,stuff!~,input,multiplier,1
	setNested ~!Me,stuff!~,input,expo,0.1
	
	setNested ~!Me,stuff!~,output,min,1
	setNested ~!Me,stuff!~,output,center,0
	setNested ~!Me,stuff!~,output,max,-1
	setNested ~!Me,stuff!~,output,multiplier,1
	
	# TODO These need to be abstracted out
	setNested ["~!Me,stuff!~,input,variable","AP,state,~!Tmp,instanceName!~,roll-deg"]
	setNested ["~!Me,stuff!~,input,goal","AP,state,~!Tmp,instanceName!~,roll-goal"]
	setNested ["~!Me,stuff!~,destination,variable","AP,state,~!Tmp,instanceName!~,aileron-req"]
	setNested ["~!Me,stuff!~,destination,textOutput","set /controls/flight/aileron ~%value%~"]


# Pitch
massSet ["AP,stateRules,base,base,pitch"],
	setNested ["~!Me,stuff!~,algorithm","direct"]
	# setNested ~!Me,stuff!~,pid,use,1
	# setNested ["~!Me,stuff!~,algorithm","PID"]
	
	setNested ~!Me,stuff!~,input,min,-90
	setNested ~!Me,stuff!~,input,center,0
	setNested ~!Me,stuff!~,input,max,90
	setNested ~!Me,stuff!~,input,multiplier,1
	
	setNested ~!Me,stuff!~,output,min,-1
	setNested ~!Me,stuff!~,output,center,0
	setNested ~!Me,stuff!~,output,max,1
	setNested ~!Me,stuff!~,output,multiplier,0.8
	
	# TODO These need to be abstracted out
	setNested ["~!Me,stuff!~,input,variable","AP,state,~!Tmp,instanceName!~,pitch-deg"]
	setNested ["~!Me,stuff!~,input,goal","AP,state,~!Tmp,instanceName!~,pitch-goal"]
	setNested ["~!Me,stuff!~,destination,variable","AP,state,~!Tmp,instanceName!~,elevator-req"]
	setNested ["~!Me,stuff!~,destination,textOutput","set /controls/flight/elevator ~%value%~"]


# Yaw
massSet ["AP,stateRules,base,base,yaw"],
	setNested ["~!Me,stuff!~,algorithm","direct"]
	# setNested ["~!Me,stuff!~,algorithm","PID"]
	setNested ~!Me,stuff!~,debug,0
	setNested ~!Me,stuff!~,pid,kP,0.7
	setNested ~!Me,stuff!~,pid,iP,1
	setNested ~!Me,stuff!~,pid,kW,0.3
	setNested ~!Me,stuff!~,pid,iW,1
	setNested ["~!Me,stuff!~,pid,wanderingTime","5"]
	setNested ~!Me,stuff!~,pid,kI,0.3
	setNested ~!Me,stuff!~,pid,iI,1
	setNested ~!Me,stuff!~,pid,kD,0.5
	setNested ~!Me,stuff!~,pid,iD,1
	
	
	setNested ~!Me,stuff!~,input,min,-45
	setNested ~!Me,stuff!~,input,center,0
	setNested ~!Me,stuff!~,input,max,45
	setNested ~!Me,stuff!~,input,multiplier,1
	setNested ~!Me,stuff!~,input,expo,1
	
	setNested ~!Me,stuff!~,output,min,-0.4
	setNested ~!Me,stuff!~,output,center,0
	setNested ~!Me,stuff!~,output,max,0.4
	setNested ~!Me,stuff!~,output,multiplier,1
	
	# TODO These need to be abstracted out
	setNested ["~!Me,stuff!~,input,variable","AP,state,~!Tmp,instanceName!~,track-deviance"]
	setNested ["~!Me,stuff!~,input,goal","AP,stateRules,base,base,yaw,input,center"]
	setNested ["~!Me,stuff!~,destination,variable","AP,state,~!Tmp,instanceName!~,rudder-req"]
	setNested ["~!Me,stuff!~,destination,textOutput","set /controls/flight/rudder ~%value%~"]


# +Altitude
setNested ["AP","stateRules","base","baseAltitude",~!AP,stateRules,base,base!~]
massSet ["AP,stateRules,base,baseAltitude,altitude"],
	setNested ["~!Me,stuff!~,algorithm","direct"]
	setNested ~!Me,stuff!~,debug,0
	setNested ~!Me,stuff!~,pid,kP,0.7
	setNested ~!Me,stuff!~,pid,iP,1
	setNested ~!Me,stuff!~,pid,kW,0.2
	setNested ~!Me,stuff!~,pid,iW,1
	setNested ["~!Me,stuff!~,pid,wanderingTime","60"]
	setNested ~!Me,stuff!~,pid,kI,0
	setNested ~!Me,stuff!~,pid,iI,1
	setNested ~!Me,stuff!~,pid,kD,0.5
	setNested ~!Me,stuff!~,pid,iD,1
	
	setNested ~!Me,stuff!~,input,min,-2000
	setNested ~!Me,stuff!~,input,center,0
	setNested ~!Me,stuff!~,input,max,2000
	setNested ~!Me,stuff!~,input,multiplier,1
	
	setNested ~!Me,stuff!~,output,min,-1
	setNested ~!Me,stuff!~,output,center,0
	setNested ~!Me,stuff!~,output,max,1
	setNested ~!Me,stuff!~,output,multiplier,1
	
	# TODO These need to be abstracted out
	setNested ["~!Me,stuff!~,input,variable","AP,state,~!Tmp,instanceName!~,altitude-deviance"]
	setNested ["~!Me,stuff!~,input,goal","AP,stateRules,baseAltitude,base,altitude,input,center"]
	setNested ["~!Me,stuff!~,destination,variable","AP,state,~!Tmp,instanceName!~,throttle-req"]
	setNested ["~!Me,stuff!~,destination,textOutput","set /controls/engines/current-engine/throttle ~%value%~"]





# More specific rules
# Stand on the runway
setNested ["AP", "stateRules", "~!Tmp,instanceName!~", "stand", ~!AP,stateRules,base,base!~]



# Line up and wait
setNested ["AP", "stateRules", "~!Tmp,instanceName!~", "lineUpAndWait", ~!AP,stateRules,base,base!~]
massSet ["AP,stateRules,~!Tmp,instanceName!~,lineUpAndWait,groundspeed"],
	setNested ~!Me,stuff!~,input,min,-1
	setNested ~!Me,stuff!~,input,center,0
	setNested ~!Me,stuff!~,input,max,40
	setNested ~!Me,stuff!~,input,multiplier,1
	
	setNested ~!Me,stuff!~,output,min,1
	setNested ~!Me,stuff!~,output,center,0
	setNested ~!Me,stuff!~,output,max,-1
	setNested ~!Me,stuff!~,output,multiplier,0.5

massSet ["AP,stateRules,~!Tmp,instanceName!~,lineUpAndWait,yaw"],
	setNested ["~!Me,stuff!~,algorithm","direct"]
	
	setNested ~!Me,stuff!~,input,min,-5
	setNested ~!Me,stuff!~,input,max,5
	
	setNested ~!Me,stuff!~,output,min,0.2
	setNested ~!Me,stuff!~,output,max,-0.2
	
	# TODO These need to be abstracted out
	setNested ["~!Me,stuff!~,input,variable","AP,state,~!Tmp,instanceName!~,track-deviance"]
	setNested ["~!Me,stuff!~,input,goal","AP,stateRules,base,base,yaw,input,center"]
	setNested ["~!Me,stuff!~,destination,variable","AP,state,~!Tmp,instanceName!~,rudder-req"]
	setNested ["~!Me,stuff!~,destination,textOutput","set /controls/flight/rudder ~%value%~"]


# Take off - roll forward
setNested ["AP", "stateRules", "~!Tmp,instanceName!~", "rollForward", ~!AP,stateRules,base,base!~]
massSet ["AP,stateRules,~!Tmp,instanceName!~,rollForward,groundspeed"],

	setNested ~!Me,stuff!~,input,min,-1
	setNested ~!Me,stuff!~,input,center,0
	setNested ~!Me,stuff!~,input,max,40
	setNested ~!Me,stuff!~,input,multiplier,1
	
	setNested ~!Me,stuff!~,output,min,1
	setNested ~!Me,stuff!~,output,center,0
	setNested ~!Me,stuff!~,output,max,-1
	setNested ~!Me,stuff!~,output,multiplier,0.5

	# TODO These need to be abstracted out
	setNested ["~!Me,stuff!~,input,variable","AP,state,~!Tmp,instanceName!~,groundspeed-kt"]
	setNested ["~!Me,stuff!~,input,goal","AP,state,~!Tmp,instanceName!~,groundspeed-goal"]
	setNested ["~!Me,stuff!~,destination,variable","AP,state,~!Tmp,instanceName!~,throttle-req"]
	setNested ["~!Me,stuff!~,destination,textOutput","set /controls/engines/current-engine/throttle ~%value%~"]


	setNested ["~!Me,stuff!~,input,events,ready,description","We seem to be moving. Let's go!"]
	setNested ["~!Me,stuff!~,input,events,ready,testValue","3"]
	setNested ["~!Me,stuff!~,input,events,ready,operator",">"]
	setNested ["~!Me,stuff!~,input,events,ready,eventName","AP,takeOffReady"]
	setNested ["~!Me,stuff!~,input,events,ready,debugLevel","1"]

# TODO Check that this is instance aware
registerForEvent AP,takeOffReady,setAPState,takeOffAccelerate

# TODO interpretation of this structure needs to be fixed. It shouldn't end up in goal!
# massSet ["AP,stateRules,~!Tmp,instanceName!~,rollForward,yaw"],
#	# setNested ~!Me,stuff!~,pid,iP,1



# Take off - accelerate
setNested ["AP", "stateRules", "~!Tmp,instanceName!~", "takeOffAccelerate", ~!AP,stateRules,base,baseAltitude!~]
massSet ["AP,stateRules,~!Tmp,instanceName!~,takeOffAccelerate,altitude"],
	setNested ~!Me,stuff!~,output,min,-1
	setNested ~!Me,stuff!~,output,center,0
	# TODO Try this again.
	setNested ~!Me,stuff!~,output,max,1
	setNested ~!Me,stuff!~,output,max,1
	setNested ~!Me,stuff!~,output,multiplier,1


massSet ["AP,stateRules,~!Tmp,instanceName!~,takeOffAccelerate,speedEvents"],

	# Speed based events
	setNested ~!Me,stuff!~,input,min,-1
	setNested ~!Me,stuff!~,input,center,0
	setNested ~!Me,stuff!~,input,max,4000
	setNested ~!Me,stuff!~,input,multiplier,1
	
	setNested ~!Me,stuff!~,output,min,1
	setNested ~!Me,stuff!~,output,center,0
	setNested ~!Me,stuff!~,output,max,-1
	setNested ~!Me,stuff!~,output,multiplier,1

	# TODO These need to be abstracted out
	setNested ["~!Me,stuff!~,input,variable","AP,state,~!Tmp,instanceName!~,airspeed-kt"]
	setNested ["~!Me,stuff!~,input,goal","0"]
	setNested ["~!Me,stuff!~,destination,variable",""]
	setNested ["~!Me,stuff!~,destination,textOutput",""]

	setNested ["~!Me,stuff!~,input,events,v1,testValue","AP,state,~!Tmp,instanceName!~,v1"]
	setNested ["~!Me,stuff!~,input,events,v1,description","V1 - Passed point of no return."]
	setNested ["~!Me,stuff!~,input,events,v1,operator",">"]
	setNested ["~!Me,stuff!~,input,events,v1,eventName","AP,takeOffV1"]
	setNested ["~!Me,stuff!~,input,events,v1,debugLevel","1"]

	setNested ["~!Me,stuff!~,input,events,v2,description","V2 Rotate!"]
	setNested ["~!Me,stuff!~,input,events,v2,testValue","AP,state,~!Tmp,instanceName!~,v2"]
	setNested ["~!Me,stuff!~,input,events,v2,description","V2 - Rorate!"]
	setNested ["~!Me,stuff!~,input,events,v2,operator",">"]
	setNested ["~!Me,stuff!~,input,events,v2,eventName","AP,takeOffV2"]
	setNested ["~!Me,stuff!~,input,events,v2,debugLevel","1"]

registerForEvent AP,takeOffV1,v1
registerForEvent AP,takeOffV2,v2

massSet ["AP,stateRules,~!Tmp,instanceName!~,takeOffAccelerate,yaw"],
	setNested ["~!Me,stuff!~,algorithm","direct"]
	# setNested ["~!Me,stuff!~,algorithm","PID"]
	setNested ~!Me,stuff!~,debug,0
	setNested ~!Me,stuff!~,pid,kP,0.7
	setNested ~!Me,stuff!~,pid,iP,1
	setNested ~!Me,stuff!~,pid,kW,0.3
	setNested ~!Me,stuff!~,pid,iW,1
	setNested ["~!Me,stuff!~,pid,wanderingTime","5"]
	setNested ~!Me,stuff!~,pid,kI,0.3
	setNested ~!Me,stuff!~,pid,iI,1
	setNested ~!Me,stuff!~,pid,kD,0.5
	setNested ~!Me,stuff!~,pid,iD,1
	
	
	setNested ~!Me,stuff!~,input,min,-10
	setNested ~!Me,stuff!~,input,center,0
	setNested ~!Me,stuff!~,input,max,10
	setNested ~!Me,stuff!~,input,multiplier,1
	setNested ~!Me,stuff!~,input,expo,1
	
	setNested ~!Me,stuff!~,output,min,0.4
	setNested ~!Me,stuff!~,output,center,0
	setNested ~!Me,stuff!~,output,max,-0.4
	setNested ~!Me,stuff!~,output,multiplier,1
	
	# TODO These need to be abstracted out
	setNested ["~!Me,stuff!~,input,variable","AP,state,~!Tmp,instanceName!~,course-devianceInMeters"]
	setNested ["~!Me,stuff!~,input,goal","AP,stateRules,base,base,yaw,input,center"]
	setNested ["~!Me,stuff!~,destination,variable","AP,state,~!Tmp,instanceName!~,rudder-req"]
	setNested ["~!Me,stuff!~,destination,textOutput","set /controls/flight/rudder ~%value%~"]


# Take off - abort
setNested ["AP", "stateRules", "~!Tmp,instanceName!~", "takeOffAbort", ~!AP,stateRules,base,base!~]



# Take off - climb
setNested ["AP", "stateRules", "~!Tmp,instanceName!~", "takeOffClimb", ~!AP,stateRules,base,baseAltitude!~]

# Pitch
massSet ["AP,stateRules,~!Tmp,instanceName!~,takeOffClimb,pitch"],
	# setNested ["~!Me,stuff!~,algorithm","acceleration"]
	setNested ["~!Me,stuff!~,input","maxChangePerSecond","7"]
	setNested ["~!Me,stuff!~,input","overshootTime","3"]
	setNested ["~!Me,stuff!~,output","accelerateMultiplier","0.3"]
	setNested ["~!Me,stuff!~,output","decelerateMultiplier","0.1"]
	setNested ["~!Me,stuff!~,output","seedPercent","0.1"]
	setNested ["~!Me,stuff!~,output","allowPanic","0"]


# Altitude events
massSet ["AP,stateRules,~!Tmp,instanceName!~,takeOffClimb,altitudeEvents"],
	setNested ["~!Me,stuff!~,input,min","-1"]
	setNested ["~!Me,stuff!~,input,center","0"]
	setNested ["~!Me,stuff!~,input,max","100000"]
	setNested ["~!Me,stuff!~,input,multiplier","1"]

	setNested ["~!Me,stuff!~,output,min","-1"]
	setNested ["~!Me,stuff!~,output,center","0"]
	setNested ["~!Me,stuff!~,output,max","1"]
	setNested ["~!Me,stuff!~,output,multiplier","1"]

	# TODO These need to be abstracted out
	setNested ["~!Me,stuff!~,input,variable","AP,state,~!Tmp,instanceName!~,altitude-agl-ft"]
	setNested ["~!Me,stuff!~,input,goal","AP,stateRules,~!Tmp,instanceName!~,takeOffClimb,altitudeEvents,input,center"]
	setNested ["~!Me,stuff!~,destination,variable",""]
	setNested ["~!Me,stuff!~,destination,textOutput",""]

	setNested ["~!Me,stuff!~,input,events,gearUp,testValue","60"]
	setNested ["~!Me,stuff!~,input,events,gearUp,description","We're high enough to raise the gear."]
	setNested ["~!Me,stuff!~,input,events,gearUp,operator",">"]
	setNested ["~!Me,stuff!~,input,events,gearUp,eventName","AP,gearUp"]
	setNested ["~!Me,stuff!~,input,events,gearUp,debugLevel","1"]

	setNested ["~!Me,stuff!~,input,events,reduceFlaps,testValue","400"]
	setNested ["~!Me,stuff!~,input,events,reduceFlaps,description","Reduce flaps."]
	setNested ["~!Me,stuff!~,input,events,reduceFlaps,operator",">"]
	setNested ["~!Me,stuff!~,input,events,reduceFlaps,eventName","AP,reduceFlaps"]
	setNested ["~!Me,stuff!~,input,events,reduceFlaps,debugLevel","1"]

	setNested ["~!Me,stuff!~,input,events,flapsUp,testValue","700"]
	setNested ["~!Me,stuff!~,input,events,flapsUp,description","Flaps up."]
	setNested ["~!Me,stuff!~,input,events,flapsUp,operator",">"]
	setNested ["~!Me,stuff!~,input,events,flapsUp,eventName","AP,flapsUp"]
	setNested ["~!Me,stuff!~,input,events,flapsUp,debugLevel","1"]

	setNested ["~!Me,stuff!~,input,events,sustain,testValue","1000"]
	setNested ["~!Me,stuff!~,input,events,sustain,description","Time to sustain the climb in a less agressive manner."]
	setNested ["~!Me,stuff!~,input,events,sustain,operator",">"]
	setNested ["~!Me,stuff!~,input,events,sustain,eventName","AP,sustain"]
	setNested ["~!Me,stuff!~,input,events,sustain,debugLevel","1"]

pass
	# Altitude offset events
	massSet ["AP,stateRules,~!Tmp,instanceName!~,takeOffClimb,altitudeOffsetEvents"],
		setNested ["~!Me,stuff!~","input","min","-1"]
		setNested ["~!Me,stuff!~","input","center","0"]
		setNested ["~!Me,stuff!~","input","max","100000"]
		setNested ["~!Me,stuff!~","input","multiplier","1"]

		setNested ["~!Me,stuff!~","output","min","-1"]
		setNested ["~!Me,stuff!~","output","center","0"]
		setNested ["~!Me,stuff!~","output","max","1"]
		setNested ["~!Me,stuff!~","output","multiplier","1"]

		# TODO These need to be abstracted out
		setNested ["~!Me,stuff!~","input","variable","AP,state,~!Tmp,instanceName!~,altitude-deviance"]
		setNested ["~!Me,stuff!~","input","goal","AP,stateRules,~!Tmp,instanceName!~,takeOffClimb,altitudeOffsetEvents,input,center"]
		setNested ["~!Me,stuff!~","destination","variable",""]
		setNested ["~!Me,stuff!~","destination","textOutput",""]

		setNested ["~!Me,stuff!~","input","events","sustain","testValue","500"]
		setNested ["~!Me,stuff!~","input","events","sustain","description","We're reaching our altitude goal. Time to relax the climb."]
		setNested ["~!Me,stuff!~","input","events","sustain","operator",">"]
		setNested ["~!Me,stuff!~","input","events","sustain","eventName","AP,sustain"]
		setNested ["~!Me,stuff!~","input","events","sustain","debugLevel","1"]

registerForEvent AP,sustain,levelOut


# Sustain flight - just cruise at what ever speed is natural
setNested ["AP", "stateRules", "~!Tmp,instanceName!~", "sustain", ~!AP,stateRules,base,baseAltitude!~]
massSet ["AP,stateRules,~!Tmp,instanceName!~,sustain,altitude"],
	setNested ~!Me,stuff!~,output,min,-1
	setNested ~!Me,stuff!~,output,center,0
	# TODO Try this again.
	# setNested ~!Me,stuff!~,output,max,1
	setNested ~!Me,stuff!~,output,max,1
	setNested ~!Me,stuff!~,output,multiplier,1

# Pitch
# This is an experiment to keep the speed close to ideal using pitch. I need to lay a few more foundations for this to work well.
pass massSet ["AP,stateRules,~!Tmp,instanceName!~,sustain,pitch"],
	setNested ["~!Me,stuff!~,algorithm","direct"]
	setNested ~!Me,stuff!~,debug,1
	# setNested ~!Me,stuff!~,pid,use,1
	# setNested ["~!Me,stuff!~,algorithm","PID"]
	
	setNested ~!Me,stuff!~,input,min,-60
	setNested ~!Me,stuff!~,input,center,0
	setNested ~!Me,stuff!~,input,max,60
	setNested ~!Me,stuff!~,input,multiplier,1
	
	setNested ~!Me,stuff!~,output,min,-1
	setNested ~!Me,stuff!~,output,center,0
	setNested ~!Me,stuff!~,output,max,1
	setNested ~!Me,stuff!~,output,multiplier,0.2
	
	# TODO These need to be abstracted out
	setNested ["~!Me,stuff!~,input,variable","AP,state,~!Tmp,instanceName!~,airspeed-deviance"]
	setNested ["~!Me,stuff!~,input,goal","AP,state,~!Tmp,instanceName!~,pitch-goal"]
	setNested ["~!Me,stuff!~,destination,variable","AP,state,~!Tmp,instanceName!~,elevator-req"]
	setNested ["~!Me,stuff!~,destination,textOutput","set /controls/flight/elevator ~%value%~"]


# Speed controlled
setNested ["AP", "stateRules", "~!Tmp,instanceName!~", "speedControlled", ~!AP,stateRules,base,baseAltitude!~]

# Pitch
massSet ["AP,stateRules,~!Tmp,instanceName!~,speedControlled,speed"],
	setNested ["~!Me,stuff!~","input","variable","AP,state,~!Tmp,instanceName!~,airspeed-kt"]
	setNested ["~!Me,stuff!~","input","goal","AP,state,~!Tmp,instanceName!~,airspeed-goal"]
	setNested ["~!Me,stuff!~","destination","variable","AP,state,~!Tmp,instanceName!~,pitch-goal"]
	setNested ["~!Me,stuff!~","destination","textOutput",""]

	# setNested ["~!Me,stuff!~","algorithm","acceleration"]
	setNested ["~!Me,stuff!~","input","maxChangePerSecond","7"]
	setNested ["~!Me,stuff!~","input","overshootTime","3"]
	setNested ["~!Me,stuff!~","output","min","-45"]
	setNested ["~!Me,stuff!~","output","max","45"]
	setNested ["~!Me,stuff!~","output","accelerateMultiplier","0.01"]
	setNested ["~!Me,stuff!~","output","decelerateMultiplier","0.1"]
	setNested ["~!Me,stuff!~","output","seedPercent","0.01"]
	setNested ["~!Me,stuff!~","output","allowPanic","0"]


pass
	get AP,stateRules,~!Tmp,instanceName!~,sustain
	setNested
	outNow

unset Tmp,instanceName
