# Experiment with flightgear abstraction ~ experimentation

# Specify which host to connect to.
if ~!Global,fgfsab!~,!=,,
	set AP,defaultHost,~!Global,fgfsab!~
else
	set AP,defaultHost,localhost

# Create faucets
createSocketClientFaucet clientSocket,,quit,quit,12345,~!AP,defaultHost!~
deliver clientSocket,_control,expectEOL true
deliver clientSocket,_control,inEOL n
deliver clientSocket,_control,outEOL rn
createTermFaucet terminal
createInlineCallFaucet call
createCallFaucet prefixAchelOut,toString,achel> ~%value%~
createNullFaucet null


# Create basic relationships
createPipe terminal,call
createPipe call,terminal
createPipe terminal,prefixAchelOut
createPipe prefixAchelOut,terminal
setFaucetAs terminal,General,echoObject
# createPipe clientSocket,terminal


# Collect incoming data from client
createRegexGetFaucet harvestState
createPipe clientSocket,harvestState
createPipe harvestState,null

# Feedback from data being sent to the flight sim
setNested ["AP","stateConfig","feedback","regex","^.*\\/([a-z]*-*[a-z]*) = '(.*)'.*$"]
setNested ["AP","stateConfig","feedback","destination","AP,state"]
setNested ["AP","stateConfig","feedback","1","key"]
setNested ["AP","stateConfig","feedback","2","value"]

# Data coming back from a request
setNested ["AP","stateConfig","requireResult","regex","^(\\/> )*([a-z]*(-[a-z]*)*).=.*'(.*)'.*$"]
setNested ["AP","stateConfig","requireResult","destination","AP,state"]
setNested ["AP","stateConfig","requireResult","2","key"]
setNested ["AP","stateConfig","requireResult","4","value"]

deliver ["harvestState","_control","setConfigSrc AP,stateConfig"]



# Set up the AP
createBalanceFaucet balance
APRules-base

createAP default,default

engageAP

# Start up
createTimer main,100000
createTimer piggyBack,50000

registerForEvent Timer,main,deliverAll,100
registerForEvent Achel,finishEarly,startMainLoop


